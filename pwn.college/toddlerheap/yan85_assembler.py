instruction_order = ["op", "arg2", "arg1"]

ins_map = {
    "add": 0x01,
    "imm": 0x10,
    "stk": 0x40,
    "stm": 0x08,
    "ldm": 0x04,
    "cmp": 0x02,
    "jmp": 0x80,
    "sys": 0x20
}

reg_map = {
    "a": 16,
    "b": 64,
    "c": 32,
    "d": 4,
    "s": 8,
    "i": 1,
    "f": 2
}

sys_map = {
    "open": 0x10, 
    "read_code": 0x01,
    "read_mem": 0x02,
    "write": 0x20,
    "sleep": 0x04,
    "exit": 0x08
}

def order_instruction(op, a1, a2):
    opi = instruction_order.index("op")
    arg1i = instruction_order.index("arg1")
    arg2i = instruction_order.index("arg2")

    out = [b'ZZ', b'ZZ', b'ZZ']
    for i in range(3):
        if i == opi:
            out[i] = op.to_bytes(1, byteorder='little')
        elif i == arg1i:
            out[i] = a1.to_bytes(1, byteorder='little')
        elif i == arg2i:
            out[i] = a2.to_bytes(1, byteorder='little')
    
    if b'ZZ' in out:
        print("OOPS")
        print(out)
        exit(-1)
    #print(out)
    return(out)

def add(a1: str, a2: str):
    op = ins_map["add"]
    a1_val = reg_map[a1]
    a2_val = reg_map[a2]

    ins = order_instruction(op, a1_val, a2_val)
    return(b"".join(ins))

def sys(a1: str, a2: str):
    op = ins_map["sys"]
    a1_val = sys_map[a1]
    a2_val = reg_map[a2]

    ins = order_instruction(op, a1_val, a2_val)
    return(b"".join(ins))

def imm(a1: str, a2: str):
    op = ins_map["imm"]
    a1_val = reg_map[a1]
    a2_val = a2

    ins = order_instruction(op, a1_val, a2_val)
    return(b"".join(ins))

with open("inp", "wb") as f:
    f.write(imm('a', 1))
    f.write(imm('b', 255))
    f.write(imm('c', 255))
    f.write(sys('write', 'd'))
    f.write(imm('a', 0))
    f.write(imm('b', 255))
    f.write(imm('c', 255))
    f.write(sys('read_mem', 'd'))
    f.write(sys('exit', 'd'))
    f.write(b'\x00'*(0x300-27))
    f.write(b'A'*0x100)
